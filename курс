#include <iostream>
#include <vector>
#include <random> // Для генерации случайных чисел
 
using std::vector;
using std::cout;
using std::cin;
using std::endl;
 
// Объявления функций
void manualFill(vector<vector<int>>& matrix);
void randomFill(vector<vector<int>>& matrix);
void processMatrix(const vector<vector<int>>& matrix); // Добавляем const, чтобы предотвратить изменение матрицы
 
int main() {
    // Запрос размера матрицы
    int size; // Изменяем на int, чтобы обработать отрицательные значения
    cout << "Введите размер квадратной матрицы: ";
    while (!(cin >> size) || size <= 0) { // Проверка на корректность ввода
        cout << "Некорректный размер матрицы. Размер должен быть положительным целым числом." << endl;
        cin.clear(); // Очищаем флаг ошибки ввода
        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очищаем буфер ввода
        cout << "Повторите ввод: ";
    }
 
    // Создание матрицы
    vector<vector<int>> matrix(size, vector<int>(size));
 
    // Выбор способа заполнения матрицы
    char choice;
    cout << "Выберите способ заполнения матрицы (m - вручную, r - случайными значениями): ";
    cin >> choice;
 
    // Проверка корректности ввода способа заполнения
    while (choice != 'm' && choice != 'r') {
        cout << "Некорректный выбор. Используйте 'm' для заполнения вручную или 'r' для случайного заполнения." <<endl;
        cout << "Повторите выбор: ";
        cin >> choice;
    }
 
    // Заполнение матрицы
    if (choice == 'm') {
        manualFill(matrix);
    } else {
        randomFill(matrix);
    }
 
    // Обработка матрицы
    processMatrix(matrix);
 
    return 0;
}
 
// Определения функций
 
void manualFill(vector<vector<int>>& matrix) {
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[i].size(); ++j) {
            while (!(cin >> matrix[i][j])) {
                cout << "Ошибка ввода. Введите целое число: ";
                cin.clear(); // Очищаем флаг ошибки ввода
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Очищаем буфер ввода
            }
        }
    }
}
 
void randomFill(vector<vector<int>>& matrix) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(0, 99);
 
    cout << "Сгенерированная матрица:" << endl;
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[i].size(); ++j) {
            matrix[i][j] = dis(gen); // Генерация случайного числа от 0 до 99
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}
 
void processMatrix(const vector<vector<int>>& matrix) {
    int maxElement = matrix[0][0];
    size_t maxRowIndex = 0, maxColIndex = 0;
 
    // Находим максимальный элемент и его индексы
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[i].size(); ++j) {
            if (matrix[i][j] > maxElement) {
                maxElement = matrix[i][j];
                maxRowIndex = i;
                maxColIndex = j;
            }
        }
    }
 
    if (maxRowIndex < maxColIndex) {
        cout << "Максимальный элемент находится выше главной диагонали." << endl;
        cout << "Транспонируем матрицу:" << endl;
 
        // Транспонируем матрицу
        vector<vector<int>> transposed(matrix[0].size(), vector<int>(matrix.size()));
        for (int i = 0; i < matrix.size(); ++i) {
            for (int j = 0; j < matrix[i].size(); ++j) {
                transposed[j][i] = matrix[i][j];
            }
        }
 
        // Выводим транспонированную матрицу
        for (int i = 0; i < transposed.size(); ++i) {
            for (int j = 0; j < transposed[i].size(); ++j) {
                cout << transposed[i][j] << " ";
            }
            cout << endl;
        }
    } else {
        cout << "Максимальный элемент находится на или ниже главной диагонали." << endl;
        int rowSum = 0, colSum = 0;
 
        // Суммируем элементы строки и столбца
        for (int i = 0; i < matrix.size(); ++i) {
            rowSum += matrix[maxRowIndex][i];
            colSum += matrix[i][maxColIndex];
        }
 
        cout << "Сумма элементов строки: " << rowSum << endl;
        cout << "Сумма элементов столбца: " << colSum << endl;
    }
}
